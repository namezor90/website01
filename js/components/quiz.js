/**
 * ================================
 * QUIZ SYSTEM
 * Interactive quiz component with progress tracking
 * ================================
 */

class QuizSystem {
    constructor() {
        this.questions = new Map();
        this.currentQuiz = null;
        this.currentQuestion = 0;
        this.score = 0;
        this.answers = [];
        this.timeStart = null;
        this.categories = ['html', 'css', 'javascript', 'general'];
        this.container = null;
    }

    static init(container) {
        const quiz = new QuizSystem();
        quiz.container = container;
        quiz.loadQuestions();
        quiz.render();
        return quiz;
    }

    loadQuestions() {
        // HTML Questions
        this.questions.set('html', [
            {
                question: "Melyik HTML elem haszn√°latos bekezd√©sek l√©trehoz√°s√°ra?",
                options: ["<p>", "<div>", "<span>", "<section>"],
                correct: 0,
                explanation: "A <p> elem (paragraph) szolg√°l bekezd√©sek l√©trehoz√°s√°ra HTML-ben."
            },
            {
                question: "Mi a helyes DOCTYPE deklar√°ci√≥ HTML5-ben?",
                options: ["<!DOCTYPE html>", "<!DOCTYPE HTML5>", "<DOCTYPE html>", "<!HTML5>"],
                correct: 0,
                explanation: "HTML5-ben egyszer≈±en '<!DOCTYPE html>' kell haszn√°lni."
            },
            {
                question: "Melyik elem haszn√°latos felsorol√°sok l√©trehoz√°s√°ra?",
                options: ["<list>", "<ul>", "<ol>", "Mind a kett≈ë: <ul> √©s <ol>"],
                correct: 3,
                explanation: "Mind az <ul> (rendezetlen) √©s az <ol> (rendezett) lista elemek haszn√°lhat√≥k felsorol√°sokhoz."
            },
            {
                question: "Mi a <meta> elem c√©lja?",
                options: ["St√≠lus megad√°sa", "Metaadatok megad√°sa", "Linkek l√©trehoz√°sa", "Sz√∂veg form√°z√°sa"],
                correct: 1,
                explanation: "A <meta> elem metaadatokat ad meg a dokumentumr√≥l, mint charset, viewport, stb."
            },
            {
                question: "Melyik attrib√∫tum k√∂telez≈ë az <img> elemn√©l?",
                options: ["src", "alt", "width", "Mind a kett≈ë: src √©s alt"],
                correct: 3,
                explanation: "Mind a 'src' (forr√°s) √©s az 'alt' (alternat√≠v sz√∂veg) attrib√∫tum fontos a hozz√°f√©rhet≈ës√©g miatt."
            }
        ]);

        // CSS Questions
        this.questions.set('css', [
            {
                question: "Melyik CSS tulajdons√°g √°ll√≠tja be az elem h√°tt√©rsz√≠n√©t?",
                options: ["color", "background-color", "bg-color", "background"],
                correct: 1,
                explanation: "A 'background-color' tulajdons√°g √°ll√≠tja be az elem h√°tt√©rsz√≠n√©t."
            },
            {
                question: "Mi a CSS Box Model sorrendje k√≠v√ºlr≈ël befel√©?",
                options: ["margin, border, padding, content", "border, margin, padding, content", "padding, margin, border, content", "content, padding, border, margin"],
                correct: 0,
                explanation: "A Box Model sorrendje: margin (k√ºls≈ë), border (keret), padding (bels≈ë), content (tartalom)."
            },
            {
                question: "Melyik √©rt√©k teszi l√°thatatlann√° az elemet, de megtartja a hely√©t?",
                options: ["display: none", "visibility: hidden", "opacity: 0", "position: absolute"],
                correct: 1,
                explanation: "A 'visibility: hidden' elrejti az elemet, de megtartja a hely√©t a layoutban."
            },
            {
                question: "Mi a flexbox f≈ë tengelye alap√©rtelmezetten?",
                options: ["column", "row", "diagonal", "center"],
                correct: 1,
                explanation: "A flexbox alap√©rtelmezett flex-direction √©rt√©ke 'row', vagyis v√≠zszintes."
            },
            {
                question: "Melyik CSS tulajdons√°g haszn√°latos sz√∂veg k√∂z√©pre igaz√≠t√°s√°hoz?",
                options: ["align: center", "text-align: center", "center: true", "justify: center"],
                correct: 1,
                explanation: "A 'text-align: center' tulajdons√°g igaz√≠tja k√∂z√©pre a sz√∂veget."
            }
        ]);

        // JavaScript Questions
        this.questions.set('javascript', [
            {
                question: "Hogyan deklar√°lunk v√°ltoz√≥t JavaScript-ben (ES6+)?",
                options: ["var x = 5", "let x = 5", "const x = 5", "Mind a h√°rom helyes"],
                correct: 3,
                explanation: "ES6+ -ban haszn√°lhat√≥ var, let √©s const is, de let √©s const aj√°nlott."
            },
            {
                question: "Mi az eredm√©nye: typeof null",
                options: ["'null'", "'undefined'", "'object'", "'boolean'"],
                correct: 2,
                explanation: "Ez egy h√≠res JavaScript bug: typeof null eredm√©nye 'object'."
            },
            {
                question: "Melyik met√≥dus haszn√°latos HTML elem kiv√°laszt√°s√°ra ID alapj√°n?",
                options: ["document.getElementById()", "document.querySelector()", "document.getElement()", "Mind az els≈ë kett≈ë helyes"],
                correct: 3,
                explanation: "Mind a getElementById() √©s a querySelector('#id') haszn√°lhat√≥ ID alap√∫ kiv√°laszt√°sra."
            },
            {
                question: "Mi a k√ºl√∂nbs√©g a let √©s const k√∂z√∂tt?",
                options: ["Nincs k√ºl√∂nbs√©g", "let √∫jra√©rt√©kelhet≈ë, const nem", "const blokk szint≈±, let nem", "let gyorsabb"],
                correct: 1,
                explanation: "A let √∫jra√©rt√©kelhet≈ë v√°ltoz√≥, m√≠g a const konstans (nem v√°ltoztathat√≥)."
            },
            {
                question: "Hogyan adunk hozz√° esem√©nykezel≈ët egy elemhez?",
                options: ["element.onClick()", "element.addEventListener()", "element.addEvent()", "element.on()"],
                correct: 1,
                explanation: "Az addEventListener() met√≥dus a modern √©s aj√°nlott m√≥dja az esem√©nykezel≈ëk hozz√°ad√°s√°nak."
            }
        ]);

        // General Web Development Questions
        this.questions.set('general', [
            {
                question: "Mit jelent a 'responsive design'?",
                options: ["Gyors bet√∂lt√©s", "Mobilbar√°t design", "Interakt√≠v elemek", "Sz√≠nes design"],
                correct: 1,
                explanation: "A responsive design k√ºl√∂nb√∂z≈ë k√©perny≈ëm√©retekhez alkalmazkod√≥ webdesignt jelent."
            },
            {
                question: "Mi a PWA?",
                options: ["Progressive Web App", "Public Web Access", "Private Web Application", "Portable Web Asset"],
                correct: 0,
                explanation: "PWA = Progressive Web App, egy webalkalmaz√°s, ami nat√≠v app √©lm√©nyt ny√∫jt."
            },
            {
                question: "Mit jelent az 'accessibility' webfejleszt√©sben?",
                options: ["Gyorsas√°g", "Hozz√°f√©rhet≈ës√©g", "Biztons√°g", "Kompatibilit√°s"],
                correct: 1,
                explanation: "Az accessibility (a11y) a webtartalom hozz√°f√©rhet≈ës√©g√©t jelenti mindenki sz√°m√°ra."
            },
            {
                question: "Mi a CSS Grid el≈ënye a Flexbox-szal szemben?",
                options: ["Gyorsabb", "K√©tdimenzi√≥s layout", "Egyszer≈±bb", "T√∂bb b√∂ng√©sz≈ë t√°mogatja"],
                correct: 1,
                explanation: "A CSS Grid k√©tdimenzi√≥s (sorok √©s oszlopok) layoutot tesz lehet≈ëv√©."
            },
            {
                question: "Mi a 'SEO'?",
                options: ["Search Engine Optimization", "Secure Email Operation", "Social Event Organization", "Software Engineering Online"],
                correct: 0,
                explanation: "SEO = Search Engine Optimization, keres≈ëoptimaliz√°l√°s."
            }
        ]);
    }

    render() {
        if (!this.container) return;

        this.container.innerHTML = `
            <div class="quiz-container">
                <div class="quiz-content">
                    <div class="quiz-header">
                        <h2>üß† Webfejleszt√©si Kv√≠z</h2>
                        <p>Teszteld a tud√°sod interakt√≠v k√©rd√©sekkel!</p>
                    </div>
                    
                    <div class="quiz-setup" id="quizSetup">
                        <div class="setup-options">
                            <div class="option-group">
                                <label for="categorySelect">Kateg√≥ria:</label>
                                <select id="categorySelect" class="form-select">
                                    <option value="random">üé≤ Vegyes k√©rd√©sek</option>
                                    <option value="html">üìÑ HTML</option>
                                    <option value="css">üé® CSS</option>
                                    <option value="javascript">‚ö° JavaScript</option>
                                    <option value="general">üåê √Åltal√°nos</option>
                                </select>
                            </div>
                            
                            <div class="option-group">
                                <label for="questionCount">K√©rd√©sek sz√°ma:</label>
                                <select id="questionCount" class="form-select">
                                    <option value="5">5 k√©rd√©s</option>
                                    <option value="10" selected>10 k√©rd√©s</option>
                                    <option value="15">15 k√©rd√©s</option>
                                    <option value="20">20 k√©rd√©s</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="setup-actions">
                            <button class="btn-primary" onclick="Quiz.startQuiz()">üöÄ Kv√≠z ind√≠t√°sa</button>
                        </div>
                    </div>
                    
                    <div class="quiz-game hidden" id="quizGame">
                        <div class="quiz-progress">
                            <div class="progress-bar">
                                <div class="progress-fill" id="progressFill"></div>
                            </div>
                            <span class="progress-text" id="progressText">1 / 10</span>
                        </div>
                        
                        <div class="question-container">
                            <div class="question-text" id="questionText"></div>
                            <div class="options-container" id="optionsContainer"></div>
                            <div class="question-explanation hidden" id="questionExplanation"></div>
                        </div>
                        
                        <div class="quiz-actions">
                            <button class="btn-secondary" id="nextBtn" onclick="Quiz.nextQuestion()" style="display: none;">K√∂vetkez≈ë k√©rd√©s</button>
                        </div>
                    </div>
                    
                    <div class="quiz-results hidden" id="quizResults">
                        <!-- Results will be dynamically generated -->
                    </div>
                </div>
            </div>
        `;
    }

    startQuiz(category = null, questionCount = null) {
        const categorySelect = document.getElementById('categorySelect');
        const questionCountSelect = document.getElementById('questionCount');
        
        category = category || categorySelect?.value || 'random';
        questionCount = questionCount || parseInt(questionCountSelect?.value) || 10;

        let allQuestions = [];
        
        if (category === 'random') {
            // Collect all questions from all categories
            for (const questions of this.questions.values()) {
                allQuestions.push(...questions);
            }
        } else {
            allQuestions = this.questions.get(category) || [];
        }

        if (allQuestions.length === 0) {
            if (window.App) {
                window.App.showNotification('warning', 'Nincs k√©rd√©s', 'Ehhez a kateg√≥ri√°hoz nincsenek k√©rd√©sek');
            }
            return false;
        }

        // Shuffle and select questions
        const shuffled = this.shuffleArray([...allQuestions]);
        this.currentQuiz = shuffled.slice(0, Math.min(questionCount, shuffled.length));
        this.currentQuestion = 0;
        this.score = 0;
        this.answers = [];
        this.timeStart = Date.now();

        // Hide setup, show game
        document.getElementById('quizSetup').classList.add('hidden');
        document.getElementById('quizGame').classList.remove('hidden');
        document.getElementById('quizResults').classList.add('hidden');

        this.renderQuestion();
        return true;
    }

    renderQuestion() {
        if (this.currentQuestion >= this.currentQuiz.length) {
            this.showResults();
            return;
        }

        const question = this.currentQuiz[this.currentQuestion];
        const progress = ((this.currentQuestion + 1) / this.currentQuiz.length) * 100;

        // Update progress
        const progressFill = document.getElementById('progressFill');
        const progressText = document.getElementById('progressText');
        
        if (progressFill) progressFill.style.width = `${progress}%`;
        if (progressText) progressText.textContent = `${this.currentQuestion + 1} / ${this.currentQuiz.length}`;

        // Render question
        const questionText = document.getElementById('questionText');
        const optionsContainer = document.getElementById('optionsContainer');
        const explanationDiv = document.getElementById('questionExplanation');
        const nextBtn = document.getElementById('nextBtn');

        if (questionText) questionText.textContent = question.question;
        if (nextBtn) nextBtn.style.display = 'none';
        if (explanationDiv) explanationDiv.classList.add('hidden');

        if (optionsContainer) {
            optionsContainer.innerHTML = question.options.map((option, index) => `
                <button class="option-btn" data-index="${index}" onclick="Quiz.selectAnswer(${index})">
                    <span class="option-letter">${String.fromCharCode(65 + index)}</span>
                    <span class="option-text">${option}</span>
                </button>
            `).join('');
        }
    }

    selectAnswer(selectedIndex) {
        const question = this.currentQuiz[this.currentQuestion];
        const isCorrect = selectedIndex === question.correct;
        
        // Record answer
        this.answers.push({
            question: question.question,
            selected: selectedIndex,
            correct: question.correct,
            isCorrect: isCorrect,
            options: question.options,
            explanation: question.explanation
        });

        if (isCorrect) {
            this.score++;
        }

        // Update option buttons
        const optionButtons = document.querySelectorAll('.option-btn');
        optionButtons.forEach((btn, index) => {
            btn.disabled = true;
            if (index === question.correct) {
                btn.classList.add('correct');
            } else if (index === selectedIndex && !isCorrect) {
                btn.classList.add('incorrect');
            }
        });

        // Show explanation
        const explanationDiv = document.getElementById('questionExplanation');
        if (explanationDiv) {
            explanationDiv.innerHTML = `
                <div class="explanation-content">
                    <h4>üìö Magyar√°zat</h4>
                    <p>${question.explanation}</p>
                </div>
            `;
            explanationDiv.classList.remove('hidden');
        }

        // Show next button
        const nextBtn = document.getElementById('nextBtn');
        if (nextBtn) {
            nextBtn.style.display = 'block';
            if (this.currentQuestion === this.currentQuiz.length - 1) {
                nextBtn.textContent = 'Eredm√©nyek megtekint√©se';
            }
        }

        // Track answer for analytics
        if (window.App) {
            window.App.trackAnalytics('quiz_answer', {
                question: this.currentQuestion + 1,
                correct: isCorrect,
                category: question.category || 'general'
            });
        }
    }

    nextQuestion() {
        this.currentQuestion++;
        this.renderQuestion();
    }

    showResults() {
        const timeElapsed = Date.now() - this.timeStart;
        const percentage = Math.round((this.score / this.currentQuiz.length) * 100);
        
        // Hide game, show results
        document.getElementById('quizGame').classList.add('hidden');
        document.getElementById('quizResults').classList.remove('hidden');

        const resultsContainer = document.getElementById('quizResults');
        resultsContainer.innerHTML = this.generateResultsHTML(percentage, timeElapsed);

        // Save quiz result
        this.saveQuizResult(percentage, timeElapsed);

        // Track completion
        if (window.App) {
            window.App.trackAnalytics('quiz_completed', {
                score: this.score,
                total: this.currentQuiz.length,
                percentage: percentage,
                timeElapsed: timeElapsed
            });
        }
    }

    generateResultsHTML(percentage, timeElapsed) {
        const timeFormatted = this.formatTime(timeElapsed);
        const feedback = this.getFeedback(percentage);
        
        return `
            <div class="results-header">
                <h2>üéâ Kv√≠z befejezve!</h2>
            </div>
            
            <div class="score-display">
                <div class="score-circle">
                    <div class="score-percentage">${percentage}%</div>
                    <div class="score-fraction">${this.score}/${this.currentQuiz.length}</div>
                </div>
            </div>
            
            <div class="results-stats">
                <div class="stat-item">
                    <div class="stat-icon">‚úÖ</div>
                    <div class="stat-value">${this.score}</div>
                    <div class="stat-label">Helyes v√°lasz</div>
                </div>
                <div class="stat-item">
                    <div class="stat-icon">‚ùå</div>
                    <div class="stat-value">${this.currentQuiz.length - this.score}</div>
                    <div class="stat-label">Hib√°s v√°lasz</div>
                </div>
                <div class="stat-item">
                    <div class="stat-icon">‚è±Ô∏è</div>
                    <div class="stat-value">${timeFormatted}</div>
                    <div class="stat-label">Id≈ë</div>
                </div>
                <div class="stat-item">
                    <div class="stat-icon">üìä</div>
                    <div class="stat-value">${percentage}%</div>
                    <div class="stat-label">Pontsz√°m</div>
                </div>
            </div>
            
            <div class="results-feedback">
                <h3>${feedback.title}</h3>
                <p>${feedback.message}</p>
            </div>
            
            <div class="results-actions">
                <button class="btn-primary" onclick="Quiz.restartQuiz()">üîÑ √öj kv√≠z</button>
                <button class="btn-secondary" onclick="Quiz.reviewAnswers()">üìã V√°laszok √°ttekint√©se</button>
                <button class="btn-secondary" onclick="Quiz.shareResults()">üì§ Eredm√©ny megoszt√°sa</button>
            </div>
            
            <div class="detailed-results" id="detailedResults" style="display: none;">
                <h4>üìù R√©szletes eredm√©nyek</h4>
                <div class="answer-review">
                    ${this.generateAnswerReview()}
                </div>
            </div>
        `;
    }

    generateAnswerReview() {
        return this.answers.map((answer, index) => `
            <div class="answer-item ${answer.isCorrect ? 'correct' : 'incorrect'}">
                <div class="answer-question">
                    <strong>${index + 1}. ${answer.question}</strong>
                </div>
                <div class="answer-details">
                    <div class="selected-answer">
                        <strong>Te v√°laszod:</strong> ${String.fromCharCode(65 + answer.selected)} - ${answer.options[answer.selected]}
                    </div>
                    <div class="correct-answer">
                        <strong>Helyes v√°lasz:</strong> ${String.fromCharCode(65 + answer.correct)} - ${answer.options[answer.correct]}
                    </div>
                    <div class="explanation">
                        <strong>Magyar√°zat:</strong> ${answer.explanation}
                    </div>
                </div>
            </div>
        `).join('');
    }

    getFeedback(percentage) {
        if (percentage >= 90) {
            return {
                title: "üèÜ Kiv√°l√≥!",
                message: "Fantasztikus teljes√≠tm√©ny! Mesterien ismered a webfejleszt√©st."
            };
        } else if (percentage >= 80) {
            return {
                title: "üéñÔ∏è Nagyon j√≥!",
                message: "Remek eredm√©ny! Csak n√©h√°ny apr√≥s√°got √©rdemes m√©g √°tn√©zni."
            };
        } else if (percentage >= 70) {
            return {
                title: "üëç J√≥!",
                message: "J√≥ alapokkal rendelkezel, de van m√©g mit tanulni."
            };
        } else if (percentage >= 50) {
            return {
                title: "üìö K√∂zepes",
                message: "Nem rossz, de √©rdemes t√∂bb gyakorl√°ssal m√©ly√≠teni a tud√°st."
            };
        } else {
            return {
                title: "üí™ Gyakorolj m√©g!",
                message: "Ne izgulj, mindenkinek id≈ëbe telik. Gyakorolj m√©g √©s pr√≥b√°ld √∫jra!"
            };
        }
    }

    formatTime(milliseconds) {
        const seconds = Math.floor(milliseconds / 1000);
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        
        if (minutes > 0) {
            return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
        } else {
            return `${seconds}s`;
        }
    }

    shuffleArray(array) {
        const shuffled = [...array];
        for (let i = shuffled.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
        }
        return shuffled;
    }

    restartQuiz() {
        // Reset quiz state
        this.currentQuiz = null;
        this.currentQuestion = 0;
        this.score = 0;
        this.answers = [];
        this.timeStart = null;

        // Show setup, hide others
        document.getElementById('quizSetup').classList.remove('hidden');
        document.getElementById('quizGame').classList.add('hidden');
        document.getElementById('quizResults').classList.add('hidden');
    }

    reviewAnswers() {
        const detailedResults = document.getElementById('detailedResults');
        if (detailedResults) {
            if (detailedResults.style.display === 'none') {
                detailedResults.style.display = 'block';
            } else {
                detailedResults.style.display = 'none';
            }
        }
    }

    shareResults() {
        const percentage = Math.round((this.score / this.currentQuiz.length) * 100);
        const shareText = `üß† Web Dev Pro Kv√≠z eredm√©nyem: ${this.score}/${this.currentQuiz.length} (${percentage}%)!\n\nTeszteld te is a tud√°sod: ${window.location.href}`;
        
        if (navigator.share) {
            navigator.share({
                title: 'Web Dev Pro - Kv√≠z eredm√©ny',
                text: shareText,
                url: window.location.href
            });
        } else if (navigator.clipboard) {
            navigator.clipboard.writeText(shareText).then(() => {
                if (window.App) {
                    window.App.showNotification('success', 'Eredm√©ny m√°solva', 'Az eredm√©ny a v√°g√≥lapra ker√ºlt');
                }
            });
        } else {
            // Fallback
            prompt('M√°sold ki az eredm√©nyt:', shareText);
        }
    }

    saveQuizResult(percentage, timeElapsed) {
        try {
            const result = {
                id: Date.now(),
                score: this.score,
                total: this.currentQuiz.length,
                percentage: percentage,
                timeElapsed: timeElapsed,
                date: new Date().toISOString(),
                answers: this.answers
            };

            const existingResults = JSON.parse(localStorage.getItem('quizResults') || '[]');
            existingResults.push(result);
            
            // Keep only last 50 results
            if (existingResults.length > 50) {
                existingResults.splice(0, existingResults.length - 50);
            }
            
            localStorage.setItem('quizResults', JSON.stringify(existingResults));
        } catch (error) {
            console.warn('Failed to save quiz result:', error);
        }
    }

    getQuizHistory() {
        try {
            return JSON.parse(localStorage.getItem('quizResults') || '[]');
        } catch (error) {
            console.warn('Failed to load quiz history:', error);
            return [];
        }
    }

    getQuizStats() {
        const history = this.getQuizHistory();
        if (history.length === 0) {
            return {
                totalQuizzes: 0,
                averageScore: 0,
                bestScore: 0,
                totalTime: 0
            };
        }

        const totalQuizzes = history.length;
        const averageScore = Math.round(
            history.reduce((sum, result) => sum + result.percentage, 0) / totalQuizzes
        );
        const bestScore = Math.max(...history.map(result => result.percentage));
        const totalTime = history.reduce((sum, result) => sum + result.timeElapsed, 0);

        return {
            totalQuizzes,
            averageScore,
            bestScore,
            totalTime: this.formatTime(totalTime)
        };
    }

    // Static methods for global access
    static startQuiz(category, questionCount) {
        if (window.activeQuiz) {
            window.activeQuiz.startQuiz(category, questionCount);
        }
    }

    static selectAnswer(index) {
        if (window.activeQuiz) {
            window.activeQuiz.selectAnswer(index);
        }
    }

    static nextQuestion() {
        if (window.activeQuiz) {
            window.activeQuiz.nextQuestion();
        }
    }

    static restartQuiz() {
        if (window.activeQuiz) {
            window.activeQuiz.restartQuiz();
        }
    }

    static reviewAnswers() {
        if (window.activeQuiz) {
            window.activeQuiz.reviewAnswers();
        }
    }

    static shareResults() {
        if (window.activeQuiz) {
            window.activeQuiz.shareResults();
        }
    }
}

// Make Quiz available globally
window.Quiz = QuizSystem;